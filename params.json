{
  "name": "Aghfabsowecwn",
  "tagline": "A more complete support of windows elevated commands with Node",
  "body": "# aghfabsowecwn - aka wtf\r\n\r\nA Giant Hack For A Better Support Of Windows Elevated Commands With Node\r\n\r\n## Introduction\r\n\r\nThis module gives you a more complete support to run windows commands with elevated privileges.\r\n\r\n## What s the problem\r\n\r\nRunning windows elevated command with node is not simple,\r\n\r\n- loss of `FD[0,1,2]`\r\n- loss of `return codes`\r\n- loss of control over the elevated process\r\n\r\nSolutions exists on `npm`, but they all have drawbacks such as,\r\n\r\n- provide only a mimic of `child_process.exec`,\r\n- no support of `child_process.spawn`\r\n- poorly reports about `UAC` validation\r\n- poorly reports about exit codes\r\n- no support to call methods on elevated process such as `kill`\r\n- no support to listen emitted evens by the elevated process\r\n\r\nFind out more at\r\n- https://github.com/coreybutler/node-windows/issues/46\r\n- https://github.com/ChristopherHaws/node-windows-elevate\r\n- https://github.com/tehsenaus/windosu/issues/2\r\n\r\nIt s also more than possible that alternatives solution using binaries exists,\r\n\r\nI m not aware of them / I wish not to use a black box.\r\n\r\n## What s this module enhancements\r\n\r\nThis module provides\r\n\r\n- support for `child_process.spawn`\r\n- support for commons fds : `stdin`, `stdout`, `stderr`\r\n- support for methods call : `kill`\r\n- support to detect unvalidated `UAC`\r\n- support for `return codes`\r\n- support of elevated process `events`\r\n- does not need any sort of binary\r\n- automatic fix of `cwd` for the elevated process\r\n\r\n# Install\r\n\r\n```sh\r\nnpm i @mh-cbon/aghfabsowecwn --save\r\n```\r\n\r\n# Usage\r\n\r\n### spawn\r\n\r\n```js\r\nvar spawn = require('@mh-cbon/aghfabsowecwn').spawn;\r\n\r\nvar opts = {\r\n  bridgeTimeout: 5000,    // a timeout to detect that UAC was not validated, defaults to 3 minutes\r\n  stdio: 'pipe',          // How do you want your pipes ?\r\n  env:{\r\n    'FORCE_COLOR':1,  // example, enable chalk coloring  \r\n    'DEBUG': '*'      // example, enable visionmedia/debug output\r\n  }\r\n}\r\n\r\nvar child = spawn(process.argv[0], [__dirname + '/test/utils/stdin.js'], opts);\r\n\r\nchild.on('started', function () {\r\n  console.log('===> child pid=%s', child.pid)\r\n})\r\n\r\nchild.on('close', function (code) {\r\n  console.log('===> child close code=%s', code)\r\n})\r\n\r\nchild.on('exit', function (code) {\r\n  console.log('===> child exit code=%s', code)\r\n})\r\n\r\n// if UAC is not validated, or refused, an error is emitted\r\nchild.on('error', function (error) {\r\n  console.log('===> child error=%s', error)\r\n  console.log('===> child error=%j', error)\r\n  if (err.code==='ECONNREFUSED') console.log('UAC was probably not validated.')\r\n})\r\n\r\nchild.stdout.pipe(process.stdout)\r\nchild.stderr.pipe(process.stderr)\r\n\r\nchild.stdin.write('some');\r\n// child.stdin.end();\r\nchild.once('started', function () {\r\n  setTimeout(function () {\r\n    child.kill();\r\n  }, 1000)\r\n})\r\n```\r\n\r\n### exec\r\n\r\n```js\r\nvar exec = require('@mh-cbon/aghfabsowecwn').exec;\r\n\r\nvar opts = {\r\n  bridgeTimeout: 5000,    // a timeout to detect that UAC was not validated, defaults to 3 minutes\r\n  stdio: 'pipe',          // How do you want your pipes ?\r\n  env:{\r\n    'FORCE_COLOR':1,  // example, enable chalk coloring  \r\n    'DEBUG': '*'      // example, enable visionmedia/debug output\r\n  }\r\n}\r\n\r\nvar child = exec('ls -al', opts, function (err, stdout, stderr) {\r\n  console.log('===> child error=%s', error)\r\n  console.log('===> child error=%j', error)\r\n  if (err.code==='ECONNREFUSED') console.log('UAC was probably not validated.')\r\n  console.log(\"stdout=%s\", stdout);\r\n  console.error(\"stderr=%s\", stderr);\r\n});\r\n\r\nchild.on('started', function () {\r\n  console.log('===> child pid=%s', child.pid)\r\n})\r\n\r\nchild.on('close', function (code) {\r\n  console.log('===> child close code=%s', code)\r\n})\r\n\r\nchild.on('exit', function (code) {\r\n  console.log('===> child exit code=%s', code)\r\n})\r\n\r\n// if UAC is not validated, or refused, an error is emitted\r\nchild.on('error', function (error) {\r\n  console.log('===> child error=%s', error)\r\n  console.log('===> child error=%j', error)\r\n  if (err.code==='ECONNREFUSED') console.log('UAC was probably not validated.')\r\n})\r\n\r\n```\r\n\r\n# Internals\r\n\r\nThis modules is a giant hack because it uses overkill techniques to achieve something which seems rather simple.\r\n\r\nThe short story is,\r\n- the module spawns a server on a random address with an elevated process,\r\n- a client is spawned and wait for the server to be alive,\r\n- the client throws an `ECONNREFUSED` error when `UAC` was not accepted\r\n- the client create an instance of `FakeChild`,\r\n- the client connects multiple sockets with the server to emulate `pipes, events, methods, FD`\r\n- the client sends the command to run to the elevated server process\r\n- the server runs the command and exports any signal to the client\r\n- the client forwards the signals to the fake child instance\r\n\r\nThe server help to escape signals and data\r\nfrom the elevated child to the userland\r\n(socket to pipe / pipe to socket).\r\n\r\n```\r\nFD[0,1,2]\r\nstderr        [user] <=== [server] <=== [elevated]\r\nstdout        [user] <=== [server] <=== [elevated]\r\nstdin         [user] ===> [server] ===> [elevated]\r\n\r\nMethod calls\r\ncontrolin     [user] ===> [server] ===> [elevated]\r\n\r\nemitted events && set properties\r\ncontrolout    [user] <=== [server] <=== [elevated]\r\n```\r\n\r\n#### Other notes\r\n\r\n- remember that the remote child is not running with a `TTY`,\r\nso the behavior may be a bit different (no color support for example)\r\n- spawn child properties/methods call are available only once `started` event is emitted.\r\n\r\n# Todos\r\n\r\n- write the tests\r\n\r\n\r\n# Read more\r\n- http://digitaldrummerj.me/vagrant-fixing-opentable-basebox/\r\n- https://github.com/coreybutler/node-windows\r\n- https://github.com/ChristopherHaws/node-windows-elevate\r\n- https://github.com/tehsenaus/windosu\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}